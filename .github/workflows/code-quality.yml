name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史以便进行差异分析
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
    
    - name: Install Python code quality tools
      run: |
        pip install black flake8 isort mypy bandit safety
    
    - name: Python code formatting (Black)
      run: |
        echo "## Python Code Formatting Results" >> $GITHUB_STEP_SUMMARY
        cd backend
        if black --check --diff .; then
          echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          black --check --diff . >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Python import sorting (isort)
      run: |
        cd backend
        if isort --check-only --diff .; then
          echo "✅ Import sorting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Import sorting issues found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Python linting (flake8)
      run: |
        cd backend
        echo "## Python Linting Results" >> $GITHUB_STEP_SUMMARY
        flake8 . --statistics --tee --output-file=flake8-report.txt || true
        if [ -s flake8-report.txt ]; then
          echo "❌ Linting issues found:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat flake8-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No linting issues found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Security scanning (Bandit)
      run: |
        cd backend
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          issues=$(jq '.results | length' bandit-report.json)
          if [ "$issues" -gt 0 ]; then
            echo "❌ Security issues found: $issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security issues found" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Dependency vulnerability check
      run: |
        cd backend
        echo "## Dependency Vulnerability Check" >> $GITHUB_STEP_SUMMARY
        safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          vulnerabilities=$(jq '. | length' safety-report.json || echo "0")
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "❌ Vulnerable dependencies found: $vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerable dependencies found" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Frontend code quality (ESLint)
      run: |
        cd frontend
        if [ -f package.json ]; then
          npm install
          echo "## Frontend Code Quality" >> $GITHUB_STEP_SUMMARY
          if npm run lint 2>/dev/null || npx eslint src/ --ext .js,.jsx 2>/dev/null; then
            echo "✅ Frontend linting passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Frontend linting not configured or failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  # 性能测试
  # performance-test:
  #   name: Performance Test
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Build and start services
  #     run: |
  #       docker-compose up -d
  #       sleep 60  # 等待服务启动
    
  #   - name: Install performance testing tools
  #     run: |
  #       npm install -g lighthouse artillery
    
  #   - name: Backend API performance test
  #     run: |
  #       echo "## API Performance Test Results" >> $GITHUB_STEP_SUMMARY
        
  #       # 创建 Artillery 配置文件
  #       cat > artillery-config.yml << EOF
  #       config:
  #         target: 'http://localhost:8000'
  #         phases:
  #           - duration: 60
  #             arrivalRate: 10
  #       scenarios:
  #         - name: "API Health Check"
  #           requests:
  #             - get:
  #                 url: "/docs"
  #       EOF
        
  #       artillery run artillery-config.yml --output performance-report.json
        
  #       # 解析性能结果
  #       if [ -f performance-report.json ]; then
  #         echo "✅ Performance test completed" >> $GITHUB_STEP_SUMMARY
  #       else
  #         echo "❌ Performance test failed" >> $GITHUB_STEP_SUMMARY
  #       fi
    
  #   - name: Frontend Lighthouse performance test
  #     run: |
  #       echo "## Frontend Performance (Lighthouse)" >> $GITHUB_STEP_SUMMARY
        
  #       lighthouse http://localhost --output json --output-path lighthouse-report.json --chrome-flags="--headless --no-sandbox" || true
        
  #       if [ -f lighthouse-report.json ]; then
  #         performance=$(jq '.categories.performance.score * 100' lighthouse-report.json)
  #         accessibility=$(jq '.categories.accessibility.score * 100' lighthouse-report.json)
  #         bestPractices=$(jq '.categories["best-practices"].score * 100' lighthouse-report.json)
  #         seo=$(jq '.categories.seo.score * 100' lighthouse-report.json)
          
  #         echo "- Performance: ${performance}%" >> $GITHUB_STEP_SUMMARY
  #         echo "- Accessibility: ${accessibility}%" >> $GITHUB_STEP_SUMMARY
  #         echo "- Best Practices: ${bestPractices}%" >> $GITHUB_STEP_SUMMARY
  #         echo "- SEO: ${seo}%" >> $GITHUB_STEP_SUMMARY
  #       fi
    
  #   - name: Cleanup
  #     if: always()
  #     run: docker-compose down
